Modules Couche Réseau

	- init_serv		(initialisation du serveur)
	  -> socket		()
	  -> bind		()
	  -> listen		()
	  -> init_data_serv	()

	- welcome_prot		(protocole du bienvenue)
	  -> welcome_player	(graphique ou IA et verif du nombre de client (/!\ del_player))

	- acc_connect		(acceptation de la connexion)
	  -> accept
	  -> create_player

	- init_multip		(initialisation du multiplexeur)
	  -> init_bitset	(parcourt de la liste de client)
	- loop_multip		(boucle du multiplexeur)
	  -> select_manager	(boucle sur la liste de client monitoring lecture (FD_ISSET))
	- calctime_multip	(calcul temps multiplexeur)
	  -> (none)		(calcul le temps du time out du select en fonction de la date du prochain event qui est mort d'un player ou prochaine action cf action_list)

	- add_client		(ajout nouveau client)
	  -> (none)		(fait dans la phase acc_connect)
	- del_client		(suppression client)
	  -> (none)		(delete si read renvoie 0)

	- get_cmd		(réception de la commande)
	  -> my_receive		()
	  -> split		()
	  -> agregat		()
	- parse_cmd		(parsing commande)
	  -> read_cmd		(lit la queue de commande renvoyer is_processing -> ok ou renvoyer la chaine ko (assert is_processing == FALSE))
	- calctime_cmd		(calcul du temps commande)
	  -> (none)		()
	- stock_cmd		(stockage commande)
	  -> push_cmd		(pousse la commande dans la action liste ; priority queue (time))
	- proc_cmd		(processing commande) -> lien partie processing

	- loop_answer		(boucle de reponse)
	  -> (none)		(parcourt la send_list pour chaque player qui a dans la send va appeler send_answer)
	- send_answer		(reponse du serveur)
	  -> (none)		(va vider la queue out et la mettre dans la socket)

	- loop_action		(boucle des actions)
	  -> do_action		(parcourt la liste d'action et effectue l'action ; exec les actions à executer dans le cycle)
	- create_action		(créateur des actions)
	  -> (none)		(faire dans stock_cmd)
